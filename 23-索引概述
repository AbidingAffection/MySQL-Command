
1、索引的概念
	索引是在数据库表的字段上添加的，为了提高查询效率而存在的一种机制。
	一张表的一个字段可以添加一个索引，也可以多个字段联合添加索引。
	索引相当于一本书的目录，是为了缩小扫描范围而存在的一种机制。
	
	假设有一张表 t_user
	id(idIndex)		name(nameIndex)
	----------------------------------
	1				zhangsan
	2				lisi
	3				wangwu
	4				zhaoliu
	5				hanmeimei
	...
	
	select * from t_user where name='jack';
	如果MySQL中给name字段创建了索引，那么就会通过索引来查找jack
	如果MySQL中没有给name字段创建索引，那么就会执行全表扫描，遍历所有name字段下的内容，挨个比对

	Q:索引需要排序吗?
	A:索引一定需要排序，因为只有排序之后，才能存在区间的划分，才能缩小查找范围。
	  在MySQL中的索引，使用的自平衡二叉树，也就是b-tree，遵循左小右大原则，按照中序遍历查找。


2、索引的实现原理
	假设有一张表 t_user
	id(pk)		name(unique)		每一条记录在硬盘上都有物理存储编号
	------------------------------------------------------------
	1				zhangsan		0x1111
	2				lisi			0x2222
	3				wangwu			0x8888
	4				zhaoliu			0x9999
	5				hanmeimei		0x3333
	...
	
	注意:
	1、在任何数据库中，主键上都会自动添加索引。在MySQL中，一个字段上如果有unique约束的话，也会自动添加索引。
	2、在MySQL中，索引是一个单独的对象，不同的存储引擎以不同的形式存在。在MyISAM中，索引存在一个.MYI文件中。
	  在InnoDB存储引擎中，索引被存储在叫作tablespace的文件中。在MEMORY存储引擎中，索引存储在内存当中。
	3、在任何数据库中，任何一张表上的任何一条记录在硬盘上都有一个硬盘的物理存储编号。
	  索引对象实际上保存了 该字段的值 和 对应记录的物理存储编号 (当然实际的树还保存了很多其他东西)。
	
	所以 select * from t_user where name='haimeimei'; 语句在执行的时候，
	首先会查找到 'haimeimei'在b-tree中的位置，然后获得其对应的 物理存储编号
	此时查询语句便转换为 select * from t_user where 物理编号= 0x9999;
	

3、什么时候用索引
	条件1:数据量庞大
	条件2:该字段经常出现在where后面，以条件的形式存在，也就是该字段经常被扫描
	条件3:该字段很少的DML操作，因为DML会导致索引的重新排序
	
	建议不要随便添加索引，因为索引也是需要维护的，太多的话反而会降低系统的速度。
	建议通过主键查询，或者通过unique约束的字段进行查询，这样效率是比较高的。


4、为什么用b+树作为数据库的底层
	数据库的最终目的:为了方便定位数据，同时获得时间和空间的平衡。
	B树它每个节点都是平等独立的，也就是意味着你要存数据的话，每个节点都是数据。(B树你要从小到大，要走中序遍历)
	B+树只有叶子节点才真正的存的数据库一页(一个page)，非叶子节只起到了索引作用。
	看起来，B+树要存的数据可能还有冗余，比B树要的空间更多了，但其实这种冗余换来了效率上的提升。
	
	一方面，因为所有叶子节点都是数据，所以可以用链表将它们串起来，这样从一个节点到另一个节点，就不需要像B树一样，先回溯到根节点，再找另一个节点
	另一方面，这部分冗余的数据，只保留了最大值，冗余的不是很多，一方面保留了划分查找的特性，另一方面适应sql查询本身(往往要的是一个范围)，极大的提升了查找的效率。

5、索引的类型
	见文件夹下的图




